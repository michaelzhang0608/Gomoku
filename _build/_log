### Starting build.
# Target: main.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules main.ml > main.ml.depends # cached
# Target: bot.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:bot.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules bot.mli > bot.mli.depends # cached
# Target: game.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:game.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules game.mli > game.mli.depends # cached
# Target: game.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:game.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o game.cmi game.mli # cached
# Target: bot.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:bot.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o bot.cmi bot.mli # cached
# Target: go.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:go.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules go.mli > go.mli.depends # cached
# Target: go.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:go.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o go.cmi go.mli # cached
# Target: main.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o main.cmo main.ml # cached
# Target: bot.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:bot.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules bot.ml > bot.ml.depends # cached
# Target: bot.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:bot.cmo, file:bot.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o bot.cmo bot.ml # cached
# Target: game.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:game.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules game.ml > game.ml.depends # cached
# Target: game.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:game.cmo, file:game.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o game.cmo game.ml # cached
# Target: go.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:go.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules go.ml > go.ml.depends # cached
# Target: go.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:go.cmo, file:go.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o go.cmo go.ml # cached
# Target: main.byte, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 -package csv -package ANSITerminal game.cmo bot.cmo go.cmo main.cmo -o main.byte
# Compilation successful.
